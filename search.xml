<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTTP与HTTPS握手的那些事</title>
      <link href="/2020/03/16/HTTP%E4%B8%8EHTTPS%E6%8F%A1%E6%89%8B%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>/2020/03/16/HTTP%E4%B8%8EHTTPS%E6%8F%A1%E6%89%8B%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>这篇文章的起因是我在看《计算机网络自顶向下方法》时有一个题目答案中说：SMTP在应用层使用握<br>手，而HTTP不使用握手  。由于我对计算机网络掌握还不是很清楚，我就有了疑问，我知道TCP有三次握手，但是应用层的协议也有握手吗？为啥HTTP没有握手呢？</p><p>答：应用层也有握手；HTTP没有握手，但是HTTPS有握手，具体的看下面解释吧。</p><p>今天我总结了什么是HTTP三次握手，还有HTTPS握手的过程以及为什么HTTPS是安全的。</p><p><strong>前提</strong></p><p>在讲述这两个握手时候，有一些东西需要提前说明。</p><p><strong>HTTP与TCP/IP区别？</strong></p><p>TPC/IP协议是传输层协议，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。WEB使用HTTP协议作应用层协议，以封装HTTP 文本信息，然后使用TCP/IP做传输层协议将它发到网络上。</p><p>下面的图表试图显示不同的TCP/IP和其他的协议在最初OSI（Open System Interconnect）模型中的位置：</p><p><img src="https://gzhkevin-image.oss-cn-beijing.aliyuncs.com/img/20200316111824.png" alt=""></p><p>PS：表格来自网上资料</p><p><strong>CA证书是什么？</strong></p><p>CA（Certificate Authority）是负责管理和签发证书的第三方权威机构，是所有行业和公众都信任的、认可的。</p><p>CA证书，就是CA颁发的证书，可用于验证网站是否可信（针对HTTPS）、验证某文件是否可信（是否被篡改）等，也可以用一个证书来证明另一个证书是真实可信，最顶级的证书称为根证书。除了根证书（自己证明自己是可靠），其它证书都要依靠上一级的证书，来证明自己。</p><p>例如我们熟悉的github，使用的是https，见下图</p><p><img src="https://gzhkevin-image.oss-cn-beijing.aliyuncs.com/img/20200316112707.png" alt=""></p><p><img src="https://gzhkevin-image.oss-cn-beijing.aliyuncs.com/img/20200316112736.png" alt=""></p><p>比如爱课程，使用的就是http，见下图：</p><p><img src="https://gzhkevin-image.oss-cn-beijing.aliyuncs.com/img/20200316112830.png" alt=""></p><p><strong>HTTP三次握手</strong></p><p>HTTP（HyperText Transfer Protocol)超文本传输协议是互联网上应用最为广泛的一种网络协议。由于信息是明文传输，所以被认为是不安全的。而关于HTTP的三次握手，其实就是使用三次TCP握手确认建立一个HTTP连接。</p><p>如下图所示，SYN（synchronous）是TCP/IP建立连接时使用的握手信号、Sequence number（序列号）、Acknowledge number（确认号码），三个箭头指向就代表三次握手，完成三次握手，客户端与服务器开始传送数据。</p><p><img src="https://gzhkevin-image.oss-cn-beijing.aliyuncs.com/img/20200316111927.png" alt=""></p><p>PS：图片来自网上资料</p><p>第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；</p><p>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p><p>第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</p><p><strong>HTTPS握手过程</strong></p><p>HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。具体是如何进行加密，解密，验证的，且看下图，下面的称为一次握手。</p><p><img src="https://gzhkevin-image.oss-cn-beijing.aliyuncs.com/img/20200316112001.png" alt=""></p><p>PS：图片以下描述摘自：<a href="http://zhuqil.cnblogs.com/" target="_blank" rel="noopener">http://zhuqil.cnblogs.com</a></p><p><strong>1. 客户端发起HTTPS请求</strong></p><p><strong>2. 服务端的配置</strong></p><p>采用HTTPS协议的服务器必须要有一套数字证书，可以是自己制作或者CA证书。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用CA证书则不会弹出提示页面。这套证书其实就是一对公钥和私钥。公钥给别人加密使用，私钥给自己解密使用。</p><p><strong>3. 传送证书</strong></p><p>这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等。</p><p><strong>4. 客户端解析证书</strong></p><p>这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值，然后用证书对该随机值进行加密。</p><p><strong>5. 传送加密信息</strong></p><p>这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。</p><p><strong>6. 服务段解密信息</strong></p><p>服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。</p><p><strong>7. 传输加密后的信息</strong></p><p>这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。</p><p><strong>8. 客户端解密信息</strong></p><p>客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。</p><p>PS: 整个握手过程第三方即使监听到了数据，也束手无策。</p><p><strong>总结</strong></p><p><strong>为什么HTTPS是安全的？</strong></p><p>在HTTPS握手的第四步中，如果站点的证书是不受信任的，会显示出现下面确认界面，确认了网站的真实性。另外第六和八步，使用客户端私钥加密解密，保证了数据传输的安全。</p><p><img src="https://gzhkevin-image.oss-cn-beijing.aliyuncs.com/img/20200316112103.png" alt=""></p><p><strong>HTTPS和HTTP的区别</strong></p><p>\1. https协议需要到ca申请证书或自制证书。</p><p>\2. http的信息是明文传输，https则是具有安全性的ssl加密。</p><p>\3. http是直接与TCP进行数据传输，而https是经过一层SSL（OSI表示层），用的端口也不一样，前者是80（需要国内备案），后者是443。</p><p>\4. http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><p><strong>注意https加密是在传输层</strong> </p><p>https报文在被包装成tcp报文的时候完成加密的过程，无论是https的<strong>header域</strong>也好，body域也罢都是会被加密的。</p><p>当使用<strong>tcpdump或者wireshark</strong>之类的tcp层工具抓包，获取是加密的内容，而如果用应用层抓包，使用<strong>Charels(Mac)、Fildder(Windows)</strong>抓包工具，那当然看到是明文的。</p><p>PS：HTTPS本身就是为了网络的传输安全。</p><p>例子，使用wireshark抓包：</p><p>http，可以看到抓到是明文的：</p><p><img src="https://gzhkevin-image.oss-cn-beijing.aliyuncs.com/img/20200316112136.png" alt=""></p><p>https，可以看到抓到是密文的：</p><p><img src="https://gzhkevin-image.oss-cn-beijing.aliyuncs.com/img/20200316112213.png" alt=""></p><p><strong>附录</strong></p><p>HTTPS一般使用的加密与HASH算法如下：</p><p>非对称加密算法：RSA，DSA/DSS</p><p>对称加密算法：AES，RC4，3DES</p><p>HASH算法：MD5，SHA1，SHA256</p><p>本文转自：博客园 海角在眼前 <a href="https://www.cnblogs.com/lovesong/" target="_blank" rel="noopener">https://www.cnblogs.com/lovesong/</a>   博主讲解的已经很好了，中间添加了我的些许补充</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>卷积神经网络的特点以及训练过程</title>
      <link href="/2020/03/12/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E7%89%B9%E7%82%B9%E4%BB%A5%E5%8F%8A%E8%AE%AD%E7%BB%83%E8%BF%87%E7%A8%8B/"/>
      <url>/2020/03/12/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E7%89%B9%E7%82%B9%E4%BB%A5%E5%8F%8A%E8%AE%AD%E7%BB%83%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="卷积神经网络的特点以及训练过程"><a href="#卷积神经网络的特点以及训练过程" class="headerlink" title="卷积神经网络的特点以及训练过程"></a>卷积神经网络的特点以及训练过程</h2><p>首先明确：卷积神经网络的训练是为了得到<strong>卷积核</strong>，方便之后进行其他操作</p><h3 id="卷积神经网络的特点"><a href="#卷积神经网络的特点" class="headerlink" title="卷积神经网络的特点"></a>卷积神经网络的特点</h3><h4 id="1、局部感知："><a href="#1、局部感知：" class="headerlink" title="1、局部感知："></a>1、局部感知：</h4><p>一般认为图像的空间联系是局部的像素联系比较密切，而距离较远的像素相关性较弱，因此，每个神经元没必要对全局图像进行感知，只要对<strong>局部</strong>进行感知，然后在更高层将局部的信息综合起来得到全局信息。</p><h4 id="2、参数共享："><a href="#2、参数共享：" class="headerlink" title="2、参数共享："></a>2、参数共享：</h4><p>在局部连接中，每个神经元的参数都是一样的，即：同一个卷积核在图像中都是共享的。（理解：卷积操作实际是在提取一个个局部信息，而局部信息的一些统计特性和其他部分是一样的，也就意味着这部分学到的特征也可以用到另一部分上。所以对图像上的所有位置，都能使用同样的学习特征。）卷积核共享有个问题：提取特征不充分，可以通过<strong>增加多个卷积核</strong>来弥补，可以学习多种特征。</p><h4 id="3、采样-池化-层："><a href="#3、采样-池化-层：" class="headerlink" title="3、采样(池化)层："></a>3、采样(池化)层：</h4><p>在通过卷积得到特征后，基于局部相关性原理进行亚采样，在减少数据量的同时保留有用信息。（压缩数据和参数的量，减少过拟合）（max-polling 和average-polling）</p><h3 id="多核卷积"><a href="#多核卷积" class="headerlink" title="多核卷积"></a>多核卷积</h3><p>通过<strong>权值共享</strong>可以了解到：用一个卷积核操作只能得到<strong>一部分</strong>的特征，但是得不到全部特征，这时候就必须引入多卷积核来尽可能多的获取图像矩阵的<strong>全部特征</strong>，即每个卷积核学习不同特征（卷积核不同的值）来提取原图特征。</p><p>下面图片经过三个卷积核的卷积操作得到三个特征图，每个特征图体现原图不同特征。需要注意的是，在多核卷积的过程中每个卷积核的大小应该是相同的。</p><p><img src="https://gzhkevin-image.oss-cn-beijing.aliyuncs.com/img/20200312213105.png" alt=""></p><h3 id="池化"><a href="#池化" class="headerlink" title="池化"></a>池化</h3><p>池化层往往在卷积层后面，通过池化<strong>降低</strong>卷积层输出的特征向量，同时降低<strong>过拟合</strong>发生。</p><h3 id="卷积神经网络CNN究竟是怎样一步一步工作"><a href="#卷积神经网络CNN究竟是怎样一步一步工作" class="headerlink" title="卷积神经网络CNN究竟是怎样一步一步工作"></a>卷积神经网络CNN究竟是怎样一步一步工作</h3><p>参考：<a href="https://www.jianshu.com/p/fe428f0b32c1" target="_blank" rel="noopener">https://www.jianshu.com/p/fe428f0b32c1</a></p><h3 id="卷积的实际使用"><a href="#卷积的实际使用" class="headerlink" title="卷积的实际使用"></a>卷积的实际使用</h3><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><p>代码中自行实现了卷积的操作，因为使用的卷积核都是对称的，所以不需要对其进行180旋转的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pylab</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convolve</span><span class="params">(img, fil, mode=<span class="string">'same'</span>)</span>:</span>  <span class="comment"># 分别提取三个通道</span></span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">'fill'</span>:</span><br><span class="line">        h = fil.shape[<span class="number">0</span>] // <span class="number">2</span></span><br><span class="line">        w = fil.shape[<span class="number">1</span>] // <span class="number">2</span></span><br><span class="line">        img = np.pad(img, ((h, h), (w, w), (<span class="number">0</span>, <span class="number">0</span>)), <span class="string">'constant'</span>)</span><br><span class="line">    conv_b = _convolve(img[:, :, <span class="number">0</span>], fil)  <span class="comment"># 然后去进行卷积操作</span></span><br><span class="line">    conv_g = _convolve(img[:, :, <span class="number">1</span>], fil)</span><br><span class="line">    conv_r = _convolve(img[:, :, <span class="number">2</span>], fil)</span><br><span class="line"></span><br><span class="line">    dstack = np.dstack([conv_b, conv_g, conv_r])  <span class="comment"># 将卷积后的三个通道合并</span></span><br><span class="line">    <span class="keyword">return</span> dstack  <span class="comment"># 返回卷积后的结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_convolve</span><span class="params">(img, fil)</span>:</span></span><br><span class="line">    fil_heigh = fil.shape[<span class="number">0</span>]  <span class="comment"># 获取卷积核(滤波)的高度</span></span><br><span class="line">    fil_width = fil.shape[<span class="number">1</span>]  <span class="comment"># 获取卷积核(滤波)的宽度</span></span><br><span class="line"></span><br><span class="line">    conv_heigh = img.shape[<span class="number">0</span>] - fil.shape[<span class="number">0</span>] + <span class="number">1</span>  <span class="comment"># 确定卷积结果的大小</span></span><br><span class="line">    conv_width = img.shape[<span class="number">1</span>] - fil.shape[<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    conv = np.zeros((conv_heigh, conv_width), dtype=<span class="string">'uint8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(conv_heigh):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(conv_width):  <span class="comment"># 逐点相乘并求和得到每一个点</span></span><br><span class="line">            conv[i][j] = wise_element_sum(img[i:i + fil_heigh, j:j + fil_width], fil)</span><br><span class="line">    <span class="keyword">return</span> conv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wise_element_sum</span><span class="params">(img, fil)</span>:</span></span><br><span class="line">    res = (img * fil).sum()</span><br><span class="line">    <span class="keyword">if</span> (res &lt; <span class="number">0</span>):</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> res &gt; <span class="number">255</span>:</span><br><span class="line">        res = <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = plt.imread(<span class="string">"../res/test_jpg.jpg"</span>)  <span class="comment"># 在这里读取图片</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卷积核应该是奇数行，奇数列的</span></span><br><span class="line">fil = np.array([[<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>],</span><br><span class="line">                [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">res = convolve(img, fil, <span class="string">'fill'</span>)</span><br><span class="line">plt.imshow(res)  <span class="comment"># 显示卷积后的图片</span></span><br><span class="line">pylab.show()</span><br></pre></td></tr></table></figure><h4 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h4><p>首先构造一个卷积核（当然在实际使用中是通过训练得到的），然后通过这个卷积核对图像进行操作。</p><p>代码中<strong>kernal</strong>即为卷积核，将图片和卷积核都转为numpy类型，然后进行卷积操作。</p><h5 id="对图片进行模糊"><a href="#对图片进行模糊" class="headerlink" title="对图片进行模糊"></a>对图片进行模糊</h5><p>假设我们使用图片</p><p><img src="https://lodev.org/cgtutor/images/photo3.jpg" alt=""></p><p>使用kernal为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0.0, 0.2,  0.0,</span><br><span class="line">0.2, 0.2,  0.2,</span><br><span class="line">0.0, 0.2,  0.0</span><br></pre></td></tr></table></figure><p>即我们通过将图片局部进行类似平均化的操作，达到模糊目的。</p><p>得到结果：</p><p><img src="https://lodev.org/cgtutor/images/filterblur.jpg" alt=""></p><p>如果我们使用更大的卷积核来对图片操作，kernal设置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0, 0, 1, 0, 0,</span><br><span class="line">0, 1, 1, 1, 0,</span><br><span class="line">1, 1, 1, 1, 1,</span><br><span class="line">0, 1, 1, 1, 0,</span><br><span class="line">0, 0, 1, 0, 0,</span><br></pre></td></tr></table></figure><p>我们会得到更模糊的图片：</p><p><img src="https://lodev.org/cgtutor/images/filterblurmore.jpg" alt=""></p><h4 id="另外有关图像的锐化，风格转化等更加详细的介绍可以参考下面的网址"><a href="#另外有关图像的锐化，风格转化等更加详细的介绍可以参考下面的网址" class="headerlink" title="**另外有关图像的锐化，风格转化等更加详细的介绍可以参考下面的网址"></a>**另外有关图像的锐化，风格转化等更加详细的介绍可以参考下面的网址</h4><p>我这篇博客就是根据其进行的总结，因为链接这篇文章已经说明的很清晰了，所以我就不再废话了：<a href="https://lodev.org/cgtutor/filtering.html" target="_blank" rel="noopener">https://lodev.org/cgtutor/filtering.html</a></p><h3 id="在运行过程中遇到的问题"><a href="#在运行过程中遇到的问题" class="headerlink" title="在运行过程中遇到的问题"></a>在运行过程中遇到的问题</h3><h5 id="关于-jpg-与-png的不同之处"><a href="#关于-jpg-与-png的不同之处" class="headerlink" title="关于 .jpg 与 .png的不同之处"></a>关于 .jpg 与 .png的不同之处</h5><p>对于jpg和png图像的不同之处，之前一直是没有了解，都是混用，但是在这次图像卷积实验中，看出了不同之处。</p><p><strong>如果你把上面代码中的.jpg文件改为.png文件，那么就无法得到正常的结果</strong>，为什么呢？</p><p>这还要从jpg和png的不同之处说起。</p><p>.jpg 是由<strong>三通道</strong>组成的，Red（红色）Green（绿色）Blue（蓝色），也就是说转为numpy后的shape为(x,x,3)</p><p>.png是由<strong>四通道</strong>组成的，Red（红色）Green（绿色）Blue（蓝色）和Alpha，其中Alpha通道一般用做透明度参数，这就是为啥透明图像都保存成了png格式，一般在程序开发过程中会用到透明背景的图片，这些图片都是.png类型的。.png图像转为numpy后的shape为(x,x,4)。</p><p>这算是自己的无知采坑了吧。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解公钥与私钥</title>
      <link href="/2020/03/12/%E7%90%86%E8%A7%A3%E5%85%AC%E9%92%A5%E4%B8%8E%E7%A7%81%E9%92%A5/"/>
      <url>/2020/03/12/%E7%90%86%E8%A7%A3%E5%85%AC%E9%92%A5%E4%B8%8E%E7%A7%81%E9%92%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="理解公钥与私钥"><a href="#理解公钥与私钥" class="headerlink" title="理解公钥与私钥"></a>理解公钥与私钥</h1><h3 id="一、公钥算法与私钥算法"><a href="#一、公钥算法与私钥算法" class="headerlink" title="一、公钥算法与私钥算法"></a>一、公钥算法与私钥算法</h3><p><strong>1、私钥算法</strong></p><p><strong>私钥加密算法</strong>，又称 <strong>对称加密算法</strong>，因为这种算法解密密钥和加密密钥是相同的。也正因为同一密钥既用于加密又用于解密，所以这个密钥是不能公开的。常见的有《<a href="http://songlee24.github.io/2014/12/06/des-encrypt/" target="_blank" rel="noopener">DES加密算法</a>》、《<a href="http://songlee24.github.io/2014/12/13/aes-encrypt/" target="_blank" rel="noopener">AES加密算法</a>》。</p><p><strong>2、公钥算法</strong></p><p><strong>公钥加密算法</strong>，也就是 <strong>非对称加密算法</strong>，这种算法加密和解密的密码不一样，一个是公钥，另一个是私钥：</p><ul><li>公钥和私钥成对出现</li><li>公开的密钥叫公钥，只有自己知道的叫私钥</li><li>用公钥加密的数据只有对应的私钥可以解密</li><li>用私钥加密的数据只有对应的公钥可以解密</li><li>如果可以用公钥解密，则必然是对应的私钥加的密</li><li>如果可以用私钥解密，则必然是对应的公钥加的密</li></ul><p>公钥和私钥是相对的，两者本身并没有规定哪一个必须是公钥或私钥。</p><h3 id="二、实现数据的安全传输"><a href="#二、实现数据的安全传输" class="headerlink" title="二、实现数据的安全传输"></a>二、实现数据的安全传输</h3><p>要实现数据的安全传输，当然就要对数据进行加密了。</p><p>如果使用对称加密算法，加解密使用同一个密钥，除了自己保存外，对方也要知道这个密钥，才能对数据进行解密。如果你把密钥也一起传过去，就存在密码泄漏的可能。所以我们使用<strong>非对称算法</strong>，过程如下：</p><ol><li>首先 接收方 生成一对密钥，即私钥和公钥；</li><li>然后，接收方 将公钥发送给 发送方；</li><li>发送方用收到的公钥对数据加密，再发送给接收方；</li><li>接收方收到数据后，使用自己的私钥解密。</li></ol><p>由于在非对称算法中，公钥加密的数据必须用对应的私钥才能解密，而私钥又只有接收方自己知道，这样就保证了数据传输的安全性。</p><p><a href="http://img.blog.csdn.net/20150502122610368" target="_blank" rel="noopener"><img src="http://img.blog.csdn.net/20150502122610368" alt=""></a></p><h3 id="三、对信息进行数字签名"><a href="#三、对信息进行数字签名" class="headerlink" title="三、对信息进行数字签名"></a>三、对信息进行数字签名</h3><p>除了保证数据的安全传输之外，公钥体系的另一个用途就是对数据进行签名。通常<strong>“数字签名”</strong>是用来验证发送方的身份并帮助保护数据的完整性。</p><p>例如：一个发送者 A 想要传些资料给大家，用自己的私钥对资料加密，即签名。这样一来，所有收到资料的人都可以用发送者的公钥进行验证，便可确认资料是由 A 发出来的了。（因为只有Ａ使用私钥签名得到的信息，才能用这个公钥来解） 采用数字签名，可以确认两点：</p><ol><li>保证信息是由签名者自己签名发送的，签名者不能否认或难以否认。</li><li>保证信息自签发后到收到为止未曾作过任何修改。</li></ol><p>之所以可以确认这两点，是因为用公钥可以解密的必然是用对应的私钥加的密，而私钥只有签名者持有。</p><h3 id="四、公钥算法的缺点"><a href="#四、公钥算法的缺点" class="headerlink" title="四、公钥算法的缺点"></a>四、公钥算法的缺点</h3><p>现实中，公钥机制也有它的缺点，那就是<strong>效率非常低</strong>，比常用的私钥算法（如 DES 和 AES）慢上一两个数量级都有可能。所以它不适合为大量的原始信息进行加密。为了同时兼顾安全和效率，我们通常结合使用公钥算法和私钥算法：</p><ol><li>首先，发送方使用对称算法对原始信息进行加密。</li><li>接收方通过公钥机制生成一对密钥，一个公钥，一个私钥。</li><li>接收方 将公钥发送给 发送方。</li><li>发送方用公钥对对称算法的密钥进行加密，并发送给接收方。</li><li>接收方用私钥进行解密得到对称算法的密钥。</li><li>发送方再把已加密的原始信息发送给接收方。</li><li>接收方使用对称算法的密钥进行解密。</li></ol><p><a href="http://img.blog.csdn.net/20150502122733376" target="_blank" rel="noopener"><img src="http://img.blog.csdn.net/20150502122733376" alt=""></a></p><p><strong>总结：</strong></p><ol><li><p>每个用户都有一对私钥和公钥。</p><ul><li>私钥用来进行解密和签名，是给自己用的。</li><li>公钥由本人公开，用于加密和验证签名，是给别人用的。</li></ul></li><li><p>当该用户发送文件时，用私钥签名，别人用他给的公钥解密，可以保证该信息是由他发送的。即数字签名。</p></li><li><p>当该用户接受文件时，别人用他的公钥加密，他用私钥解密，可以保证该信息只能由他看到。即安全传输。</p></li></ol><p>图片来源：<a href="http://www.cnblogs.com/chnking/archive/2007/08/30/875947.html" target="_blank" rel="noopener">www.cnblogs.com/chnking/archive/2007/08/30/875947.html</a></p><p>本文转自：<a href="https://songlee24.github.io/2015/05/03/public-key-and-private-key/" target="_blank" rel="noopener">https://songlee24.github.io/2015/05/03/public-key-and-private-key/</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
